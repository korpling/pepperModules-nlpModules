<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>NLPModules</title>
        <subtitle>User's Guide</subtitle>
        <authorgroup>
            <author>
                <personname>
                    <firstname>YOUR</firstname>
                    <surname>NAME</surname>
                </personname>
            </author>
        </authorgroup>
        <copyright>
            <year>THE DATE OF NOW</year>
            <holder>YOUR NAME, All rights reserved.</holder>
        </copyright>
        <releaseinfo>Version ${project.version}</releaseinfo>
    </info>
    <preface>
        <title>Foreword</title>
        <para>The intention of this document is first to give a guide to the user of how to use the
            here mentioned pepper modules and how to utilize a mapping performed by them. Second
            this document shall give a closer view in the details of such a mapping in a declarative
            way, to give the user a chance to understand how specific data will be mapped by the
            presented pepper modules.</para>
    </preface>
    <chapter>
        <title>Overview</title>
        <para>This project contains the pepper modules listed in <xref linkend="table_overview"/>. A
            single module can be identified via its coordinates (module-name, format-name,
            format-version) also given in <xref linkend="table_overview"/>. You can use these
            coordinates in a pepper workflow description file to identify the modules in a pepper
            conversion process. A description of how to model a workfloe description file can be
            found under https://korpling.german.hu-berlin.de/saltnpepper/.</para>
        <para>This project provides an access to the tokenizer of Salt via pepper. This is a java implementation of the TreeTagger tokenizer. The tokenizer will tokenize all STetxualDS objects of each document and will create word-like SToken objects.</para>
        <table xml:id="table_overview" frame="all">
            <title>pepper modules contained in this project</title>
            <tgroup cols="3" align="left" colsep="1" rowsep="1">
                <thead>
                    <row>
                        <entry>Name of pepper module</entry>
                        <entry>Type of pepper module</entry>
                        <entry>Format (if module is im- or exporter)</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><xref linkend="tokenizer" endterm="tokenizer_name"
                            /></entry>
                        <entry>Tokenizer</entry>
                        <entry> -- </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </chapter>
    <!--
    <chapter xml:id="changes">
        <title>Changes</title>
        <para> This chapter contains the changes in version ${project.version} compared to the
            previous version. </para>
        <section>
            <title><xref linkend="sample_importer_name"/></title>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Change 1</para>
                    <para>Change 2</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title><xref linkend="sample_manipulator_name"/></title>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Change 1</para>
                    <para>Change 2</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title><xref linkend="sample_exporter_name"/></title>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Change 1</para>
                    <para>Change 2</para>
                </listitem>
            </itemizedlist>
        </section>
    </chapter>
    -->
    <chapter xml:id="tokenizer">
        <title xml:id="tokenizer_name">Tokenizer</title>
        <para>The used tokenizer is the internal tokenizer of Salt, which is a java implementation of the TreeTagger tokenizer (see: <link xlink:href="http://www.ims.uni-stuttgart.de/projekte/corplex/TreeTagger/">http://www.ims.uni-stuttgart.de/projekte/corplex/TreeTagger/</link>).</para>
        <sect1>
            <title>Mapping to Salt</title>
            <para>Tokenizes all <classname>STextualDS</classname> object being contained in all
                    <classname>SDocumentGraph</classname> object. The Tokenization is similar to the
                tokenization made by the TreeTagger tokenizer. The language will be detected
                automatically for each <classname>STextualDS</classname> object by use of the
                    <classname>TextCategorizer</classname> (see: <link
                    xlink:href="http://textcat.sourceforge.net/doc/org/knallgrau/utils/textcat/TextCategorizer.html"
                    >http://textcat.sourceforge.net/doc/org/knallgrau/utils/textcat/TextCategorizer.html</link>).
                If the language is one of the given ones: english, french, italian and german,
                abbreviations also taken from the Treetagger will be used. For each token detected
                in the text given by <classname>sTextualDS.getSText</classname> an
                    <classname>SToken</classname> object is created and linked with the
                    <classname>STextualDS</classname> object via a new
                    <classname>STextualRelation</classname> object containing the textual
                offset.</para>
        </sect1>
        <sect1>
            <title>Properties</title>
            <para> The table <xref linkend="importer_prop_overview"/> contains an overview of all
                usable properties to customize the behaviour of this pepper module. The following
                section contains a close description to each single property and describes the
                resulting differences in the mapping to the salt model.</para>
            <table xml:id="importer_prop_overview" frame="all">
                <title>properties to customize importer behaviour</title>
                <tgroup cols="4" align="left" colsep="1" rowsep="1">
                    <thead>
                        <row>
                            <entry>Name of property</entry>
                            <entry>Type of property</entry>
                            <entry>optional/ mandatory</entry>
                            <entry>default value</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><xref linkend="prop_prop1" endterm="importer_prop1_title"
                                /></entry>
                            <entry>data type (e.g. Boolean) or a list of possible values (e.g.
                                value1|value2)</entry>
                            <entry>optional|mandatory</entry>
                            <entry>default value</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <sect2 xml:id="prop_prop1">
                <title xml:id="importer_prop1_title">tokenizer.abbreviationFolder</title>
                <para>Since the TreeTagger tokenizer produces better results, when it knows about
                    abbreviations used in the text corresponding to the language of the text, it is
                    possible to feed the Tokenizer module with lists of abbreviations. You can use
                    this property to pass a folder location to the Tokenizer containing files,
                    containing abbreviations. Such a file is just a text file containing
                    abbreviations devided by linebreaks. </para>
                <programlisting>
                    a.e.
                    a.l.
                    a.m.
                    a.o.b.
                    a/c
                    a11y
                    AAR
                    AAT
                    AAUW
                    ab
                </programlisting>
                    
                <para>Since abbreviations could be language dependent, the Tokenizer provides a mechanism to set abbreviation lists corresponding to a language. Therefore just name the file ending like the language for abbreviations. Use the the ISO 639-2 code for language description. For instance:</para>
                <programlisting>
                    abbreviation.de
                    abbreviation.en
                    abbreviation.fr
                    abbreviation.it
                </programlisting>
            </sect2>
        </sect1>
    </chapter>
</book>
